---
description: Git commit message template for clear and practical commit messages
alwaysApply: false
---

# GIT COMMIT MESSAGE TEMPLATE

## Format Options

**Simple Format (for straightforward changes):**
```
[commit_type]: [brief main summary]
```

**Detailed Format (for complex changes):**
```
[commit_type]: [brief main summary]

[Logical Group Name]:
- [relevant detail about what changed and why]
- [filename: sometimes mentioning a file is useful]
- [another important change or context]
- [more details as needed]

[Another Group Name if needed]:
* [more details as needed]

[1-3 concise simple sentences to explain the benefit / impact i.e. the point]
```

## Commit Types
- **feature:** New feature for users (adds functionality)
- **fix:** Bug fixes (fixes broken functionality)
- **docs:** Documentation changes only e.g. README.md
- **rules** `CLAUDE.md` files or in `.cursor/rules/`
- **style:** Code formatting, whitespace, semicolons (no logic changes)
- **refactor:** Code changes that neither fix bugs nor add features
- **test:** Adding or updating tests
- **chore:** Development workflow, workspace config, dependency updates, dev tools, (affects development experience)
- **build:** Build system changes, compilation process, how code gets packaged, (how the final product gets created)
- **ci:** CI/CD pipeline changes, automated workflows, deployment automation, (when/how automation runs)
- **perf:** Performance improvements

## Guidelines
- Use multi-line format for commits touching multiple files/areas
- Bullet points can be filenames, key changes, important context, or anything that helps explain the commit
- Group related changes logically
- Main summary should be present tense, under 50 characters
- Focus on format/content that would be most helpful to someone reviewing this later